{ username ? "g.pogacnik" }:

let 
   pkgs = import <nixpkgs> {};
   python = import ./requirements.nix { inherit pkgs; };
   gems = pkgs.bundlerEnv {
     name = "aws-gems";
     ruby = pkgs.ruby;
     gemdir = ./.;
   };

   awsConfig = pkgs.writeTextFile {
     name = "aws-user-config";
     text = ''
       # Generated by Nix
       [default]
       region=eu-central-1
       azure_tenant_id=SportradarAG.onmicrosoft.com
       azure_app_id_uri=a43d895e-e3f3-42b9-bb13-3191f61ef11d
       azure_default_username=${username}@sportradar.com
       azure_default_role_arn=
       azure_default_duration_hours=1
     '';
   };

in

pkgs.stdenv.mkDerivation {
  name = "aws";

  buildInputs = [
    pkgs.figlet
    pkgs.lolcat
    pkgs.coreutils
    pkgs.findutils
    pkgs.gnugrep
    pkgs.docker
    pkgs.ruby
    gems
    python.packages."awscli"
  ];

  shellHook = ''
    export PS1='\n\[\033[1;32m\][aws:\w]\$\[\033[0m\] '
    figlet "AWS" | lolcat --freq 0.5

    # if ~/.aws/config is pointing to nix store you can safely overwrite it
    if [ -L  ~/.aws/config ] && $(${pkgs.coreutils}/bin/readlink -f ${awsConfig} | ${pkgs.gnugrep}/bin/grep -q '^/nix/store'); then
      ${pkgs.coreutils}/bin/ln -fs ${awsConfig} ~/.aws/config  
    else
      # Else backup and overwrite
      ${pkgs.coreutils}/bin/mv ~/.aws/config ~/.aws/config.$$
      echo "Backed up ~/.aws/config to ~/.aws/config.$$"
      ${pkgs.coreutils}/bin/ln -fs ${awsConfig} ~/.aws/config  
    fi
    
    # Add autocompletion (assumption is this is bash)
    ${python.packages."awscli"}/bin/aws_bash_completer

    # Directly installing aws-azure-login through npm is a PITA
    ${pkgs.docker}/bin/docker run --rm -it -v ~/.aws:/root/.aws -v ${awsConfig}:${awsConfig} dtjohnson/aws-azure-login
  '';
}
